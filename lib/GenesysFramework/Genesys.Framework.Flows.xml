<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Genesys.Framework.Flows</name>
    </assembly>
    <members>
        <member name="T:Genesys.Framework.Common.FlowMode">
            <summary>
            Mode of a workflow (creating a new entity, etc.)
            </summary>
        </member>
        <member name="P:Genesys.Framework.Common.FlowMode.Value">
            <summary>
            Attribute value
            </summary>
        </member>
        <member name="M:Genesys.Framework.Common.FlowMode.#ctor(Genesys.Framework.Common.FlowModes)">
            <summary>
            Constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="T:Genesys.Framework.Common.FlowModes">
            <summary>
            The modes a workflow supports
            </summary>    
        </member>
        <member name="F:Genesys.Framework.Common.FlowModes.ValidationAndSave">
            <summary>
            Default. Sets workflow to validate and save data
            </summary>
        </member>
        <member name="F:Genesys.Framework.Common.FlowModes.SaveOnly">
            <summary>
            Saves with no validation
            </summary>
        </member>
        <member name="F:Genesys.Framework.Common.FlowModes.ValidationOnly">
            <summary>
            Validates and does not commit any data
            </summary>
        </member>
        <member name="T:Genesys.Framework.Common.FlowExecuter`4">
            <summary>
            Base class required for all workflows
            </summary>
        </member>
        <member name="F:Genesys.Framework.Common.FlowExecuter`4.ReturnDataKey">
             <summary>
            ActivityFlow key for data returned from this workflow
             </summary>
        </member>
        <member name="P:Genesys.Framework.Common.FlowExecuter`4.FlowKey">
            <summary>
            Unique ID of the workflow
            </summary>
        </member>
        <member name="P:Genesys.Framework.Common.FlowExecuter`4.ThrowException">
            <summary>
            If IsValid() == false, throw exception if this property set to true
            </summary>
        </member>
        <member name="P:Genesys.Framework.Common.FlowExecuter`4.Context">
            <summary>
            User, device and app context
            </summary>
        </member>
        <member name="P:Genesys.Framework.Common.FlowExecuter`4.DataIn">
            <summary>
            Data to be processed
            </summary>
        </member>
        <member name="P:Genesys.Framework.Common.FlowExecuter`4.Result">
            <summary>
            Results of the workflow
            </summary>
        </member>
        <member name="P:Genesys.Framework.Common.FlowExecuter`4.Activity">
            <summary>
            This Flow activity
            </summary>
        </member>
        <member name="P:Genesys.Framework.Common.FlowExecuter`4.Mode">
            <summary>
            Flow Mode: (ValidateAndSave, ValidateOnly, SaveOnly)
            </summary>
        </member>
        <member name="P:Genesys.Framework.Common.FlowExecuter`4.Method">
            <summary>
            The Http method verb that called this flow (get, post, put or delete for CRUD operations)
            </summary>
        </member>
        <member name="P:Genesys.Framework.Common.FlowExecuter`4.Behavior">
            <summary>
            FlowBehavior flags assigned to this flow
            </summary>
            <returns>All flow behavior flags assigned to this flow</returns>
        </member>
        <member name="M:Genesys.Framework.Common.FlowExecuter`4.#ctor">
            <summary>
            Encourage use of Create() method over constructors for this class.
            </summary>
        </member>
        <member name="M:Genesys.Framework.Common.FlowExecuter`4.Construct(Genesys.Foundation.Session.ISessionContext,`2)">
            <summary>
            Constructs and validates construction data
            </summary>
            <param name="context">Context of user, module, ActivitySessionflowID...everything needed to know critical data about caller</param>
            <param name="dataIn">Data to process by the workflow</param>
        </member>
        <member name="M:Genesys.Framework.Common.FlowExecuter`4.Create(Genesys.Foundation.Session.ISessionContext,`3)">
            <summary>
            For non-token based operations:
            Initializes the object, validates that construction has required x.
                Equivalent to static Construct.
            </summary>
        </member>
        <member name="M:Genesys.Framework.Common.FlowExecuter`4.DoExecute">
            <summary>
            Does the workflow-specific work.
            </summary>
            <returns></returns>s
        </member>
        <member name="M:Genesys.Framework.Common.FlowExecuter`4.Execute">
            <summary>
            Does the basic steps of a workflow. The Process() function does the workflow-specific work.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesys.Framework.Common.FlowExecuter`4.IsFlowDataComplete">
            <summary>
            Validates underlying data. If not valid, database will throw foreign key exception.
            </summary>
            <returns>True if FlowKey, ApplicationKey, EntityKey and Context.Name (username) have valid values.</returns>
        </member>
        <member name="M:Genesys.Framework.Common.FlowExecuter`4.IsApplicationValid">
            <summary>
            Is this ID valid
            </summary>
            <returns>True for ID data valid</returns>
        </member>
        <member name="M:Genesys.Framework.Common.FlowExecuter`4.IsFlowValid">
            <summary>
            Is this ID valid
            </summary>
            <returns>True for ID data valid</returns>
        </member>
        <member name="M:Genesys.Framework.Common.FlowExecuter`4.IsEntityValid">
            <summary>
            Is this Entity valid? Context.EntityKey must contain a valid key
            </summary>
            <returns>True for ID data valid</returns>
        </member>
        <member name="M:Genesys.Framework.Common.FlowExecuter`4.IsUserContextValid">
            <summary>
            Is this user valid. Context.Name must have a value, or the flow is an Anonymous flow
            </summary>
            <returns>True for ID data valid</returns>
        </member>
        <member name="M:Genesys.Framework.Common.FlowExecuter`4.EntityIDSet(System.Guid)">
            <summary>
            Sets EntityID for workflows that create new Entitys
            </summary>
            <param name="EntityKey"></param>        
        </member>
        <member name="M:Genesys.Framework.Common.FlowExecuter`4.ReturnData(Genesys.Foundation.Entity.IEntity,System.String)">
            <summary>
            Returns ID and Key and serialized data to caller
            </summary>
            <param name="entity">Entity containing ID (for internal use) and Key (for external use)</param>
            <param name="serializedData">Serialized data to be returned via database (not returned directly)</param>
        </member>
        <member name="M:Genesys.Framework.Common.FlowExecuter`4.ReturnData(Genesys.Foundation.Entity.IEntity)">
            <summary>
            Returns ID and Key to caller, no serialized data
            </summary>
            <param name="entityWithIDAndKey">Entity containing ID (for internal use) and Key (for external use)</param>
        </member>
        <member name="M:Genesys.Framework.Common.FlowExecuter`4.ReturnData(System.String)">
            <summary>
            Returns serialized data, but not ID and Key
            </summary>
            <param name="serializedData">Serialized data to be returned via database (not returned directly)</param>
        </member>
        <member name="E:Genesys.Framework.Common.FlowExecuter`4.FlowBegin">
            <summary>
            Event handler
            </summary>
        </member>
        <member name="M:Genesys.Framework.Common.FlowExecuter`4.OnFlowBegin">
            <summary>
            Event method
            </summary>
        </member>
        <member name="E:Genesys.Framework.Common.FlowExecuter`4.FlowAlreadyDone">
            <summary>
            Event handler
            </summary>
        </member>
        <member name="M:Genesys.Framework.Common.FlowExecuter`4.OnFlowAlreadyDone">
            <summary>
            Event method
            </summary>
        </member>
        <member name="E:Genesys.Framework.Common.FlowExecuter`4.FlowFailed">
            <summary>
            Event handler
            </summary>
        </member>
        <member name="M:Genesys.Framework.Common.FlowExecuter`4.OnFlowFailed">
            <summary>
            Event method
            </summary>
        </member>
        <member name="E:Genesys.Framework.Common.FlowExecuter`4.FlowComplete">
            <summary>
            Event handler
            </summary>
        </member>
        <member name="M:Genesys.Framework.Common.FlowExecuter`4.OnFlowComplete">
            <summary>
            Event method
            </summary>
        </member>
        <member name="E:Genesys.Framework.Common.FlowExecuter`4.EntityIDChanged">
            <summary>
            Event handler
            </summary>
        </member>
        <member name="M:Genesys.Framework.Common.FlowExecuter`4.OnEntityIDChanged(System.Guid)">
            <summary>
            Event method
            </summary>
            <param name="EntityKey"></param>
        </member>
        <member name="T:Genesys.Framework.Common.FlowExecuter`4.FlowBeginEventHandler">
            <summary>
            Flow beginning. No custom to return.
            </summary>
            <param name="sender">Sender of event</param>
            <param name="e">Arguments passed to the event handler</param>
        </member>
        <member name="T:Genesys.Framework.Common.FlowExecuter`4.FlowCompleteEventHandler`1">
            <summary>
            Flow completed, with processed x.
            </summary>
            <param name="sender">Sender of event</param>
            <param name="e">ReturnedID - Processed x. DataOutType - Type of data returned</param>
        </member>
        <member name="T:Genesys.Framework.Common.FlowExecuter`4.FlowCompleteEventArgs`1">
            <summary>
            Flow completed, with processed x.
            </summary>
            <typeparam name="TDataOut"></typeparam>
        </member>
        <member name="P:Genesys.Framework.Common.FlowExecuter`4.FlowCompleteEventArgs`1.DataOut">
            <summary>
            Data to be returned
            </summary>
        </member>
        <member name="T:Genesys.Framework.Common.FlowExecuter`4.FlowFailedEventHandler">
            <summary>
            Flow Failed, with FailedRulesList
            </summary>
            <param name="sender">Sender of event</param>
            <param name="e">FailedRulesList</param>
        </member>
        <member name="T:Genesys.Framework.Common.FlowExecuter`4.FlowFailedEventArgs">
            <summary>
            Flow Failed, with FailedRulesList
            </summary>
        </member>
        <member name="P:Genesys.Framework.Common.FlowExecuter`4.FlowFailedEventArgs.FailedRules">
            <summary>
            List of failed rules
            </summary>
        </member>
        <member name="T:Genesys.Framework.Common.FlowExecuter`4.FlowAlreadyDoneEventHandler">
            <summary>
            Flow Already Completed, and unable to run twice. 
            Returns ActivityWorkflowID that is blocking the execution of this workflow.
            </summary>
            <param name="sender">Sender of event</param>
            <param name="e">ActivityWorkflowID that is blocking the execution of this workflow.</param>
        </member>
        <member name="T:Genesys.Framework.Common.FlowExecuter`4.FlowAlreadyDoneEventArgs">
            <summary>
            Flow Already Completed, and unable to run twice. 
            Returns ActivityWorkflowID that is blocking the execution of this workflow.
            </summary>
        </member>
        <member name="F:Genesys.Framework.Common.FlowExecuter`4.FlowAlreadyDoneEventArgs.BlockingActivityFlowID">
            <summary>
            Previously executed ActivityWorkflowID that is blocking this transaction from starting.
            </summary>
        </member>
        <member name="T:Genesys.Framework.Common.FlowExecuter`4.EntityIDChangedEventHandler">
            <summary>
            Flow generated or retrieved a EntityID
            </summary>
            <param name="sender">Sender of event</param>
            <param name="e">Arguments passed to the event handler</param>
        </member>
        <member name="T:Genesys.Framework.Common.FlowExecuter`4.EntityIDChangedEventArgs">
            <summary>
            Flow generated or retrieved a EntityID
            </summary>
        </member>
        <member name="P:Genesys.Framework.Common.FlowExecuter`4.EntityIDChangedEventArgs.EntityKey">
            <summary>
            Primary key of entity record
            </summary>
        </member>
        <member name="T:Genesys.Framework.Common.Queryflow`4">
            <summary>
            Base class required for all query flows
            </summary>
        </member>
        <member name="P:Genesys.Framework.Common.Queryflow`4.Activity">
            <summary>
            Workflow Activity record associated with executing this workflow via Execute()
            </summary>
        </member>
        <member name="M:Genesys.Framework.Common.Queryflow`4.#ctor">
            <summary>
            Encourage use of Create() method over constructors for this class.
            </summary>
        </member>
        <member name="T:Genesys.Framework.Common.Workflow`4">
            <summary>
            Base class required for all workflows
            </summary>
        </member>
        <member name="P:Genesys.Framework.Common.Workflow`4.ThrowsException">
            <summary>
            If context property is missing data, will throw exception
            </summary>
        </member>
        <member name="P:Genesys.Framework.Common.Workflow`4.Activity">
            <summary>
            Workflow Activity record associated with executing this workflow via Execute()
            </summary>
        </member>
        <member name="M:Genesys.Framework.Common.Workflow`4.#ctor">
            <summary>
            Encourage use of Create() method over constructors for this class.
            </summary>
        </member>
        <member name="M:Genesys.Framework.Common.Workflow`4.Validate">
            <summary>
            Validates the workflow, does not commit any data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesys.Framework.Common.Workflow`4.DoValidate">
            <summary>
            Does the workflow-specific work.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesys.Framework.Common.Workflow`4.Execute">
            <summary>
            Does the basic steps of a workflow. The Process() function does the workflow-specific work.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Genesys.Framework.Common.FlowBehavior">
            <summary>
            Behavior of a workflow (creating a new entity, etc.)
            </summary>
        </member>
        <member name="P:Genesys.Framework.Common.FlowBehavior.Value">
            <summary>
            Attribute decoration value
            </summary>
        </member>
        <member name="M:Genesys.Framework.Common.FlowBehavior.#ctor(Genesys.Framework.Common.FlowBehaviors)">
            <summary>
            Constructor
            </summary>
            <param name="value">Value of the item</param>
        </member>
        <member name="T:Genesys.Framework.Common.FlowBehaviors">
            <summary>
            Enumeration to allow the attribute to use strongly-typed ID
            Note: This is a [Flags] decorated enum. Values MUST be bitwise friendly (1, 2, 4, 8, 16, 32, etc.) 
                None must be 0, and excluded from bitwise operations
            </summary>
        </member>
        <member name="F:Genesys.Framework.Common.FlowBehaviors.Default">
            <summary>
            Normal behavior: Existing entityID, user is logged on to supply Name property
            </summary>
        </member>
        <member name="F:Genesys.Framework.Common.FlowBehaviors.GeneratesEntity">
            <summary>
            Generates a EntityID: This workflow will generate a entityID, registering a user or creating a root record
            </summary>
        </member>
        <member name="F:Genesys.Framework.Common.FlowBehaviors.Anonymous">
            <summary>
            Anonymous: EntityID/User not known, and workflow will not generate a user or root record
            </summary>
        </member>
        <member name="F:Genesys.Framework.Common.FlowBehaviors.NoTracking">
            <summary>
            NoTracking: Shuts off all tracking.
            </summary>
        </member>
        <member name="T:Genesys.Framework.Person.PersonCreateWorkflow">
            <summary>
            Workflow to Create new Person
            </summary>
        </member>
        <member name="P:Genesys.Framework.Person.PersonCreateWorkflow.FlowKey">
            <summary>
            Unique id of this workflow
            </summary>
        </member>
        <member name="M:Genesys.Framework.Person.PersonCreateWorkflow.DoValidate">
            <summary>
            BR for this workflow
            </summary>
        </member>
        <member name="M:Genesys.Framework.Person.PersonCreateWorkflow.DoExecute">
            <summary>
            Does the work of this workflow
            </summary>
        </member>
        <member name="T:Genesys.Framework.Person.PersonUpdateWorkflow">
            <summary>
            Workflow to Create new Person
            </summary>
        </member>
        <member name="P:Genesys.Framework.Person.PersonUpdateWorkflow.FlowKey">
            <summary>
            Unique id of this workflow
            </summary>
        </member>
        <member name="M:Genesys.Framework.Person.PersonUpdateWorkflow.DoValidate">
            <summary>
            BR for this workflow
            </summary>
        </member>
        <member name="M:Genesys.Framework.Person.PersonUpdateWorkflow.DoExecute">
            <summary>
            Does the work of this workflow
            </summary>
        </member>
        <member name="T:Genesys.Framework.Flow.SessionflowCreateWorkflow">
            <summary>
            Create new sessionflow. This record is required to call any other workflow.
            </summary>
        </member>
        <member name="P:Genesys.Framework.Flow.SessionflowCreateWorkflow.FlowKey">
            <summary>
            Unique id of this workflow
            </summary>
        </member>
        <member name="M:Genesys.Framework.Flow.SessionflowCreateWorkflow.DoValidate">
            <summary>
            BR for this workflow
            </summary>
        </member>
        <member name="M:Genesys.Framework.Flow.SessionflowCreateWorkflow.DoExecute">
            <summary>
            Does the work of this workflow
            </summary>
        </member>
    </members>
</doc>
