<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Genesys.Framework.Entity</name>
    </assembly>
    <members>
        <member name="T:Genesys.Framework.Entity.ActivityQueryflow">
            <summary>
            Activity data on a transactional Queryflow. Main activity record for any data committed to the system.
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.ActivityQueryflow.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.ActivityQueryflow.Save(Genesys.Framework.Flow.IFlowClass)">
            <summary>
            Saves data
            </summary>
            <param name="Sessionflow">Sessionflow activity that owns this user experience</param>       
        </member>
        <member name="M:Genesys.Framework.Entity.ActivityQueryflow.CanExecute">
            <summary>
            Determines if this flow can be processed
            </summary>
        </member>
        <member name="T:Genesys.Framework.Entity.ActivitySessionflow">
            <summary>
            Sessionflow record that ties together all possible actions for a user or process.
            </summary>
        </member>
        <member name="P:Genesys.Framework.Entity.ActivitySessionflow.SessionflowData">
            <summary>
            De-serialized activity data
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.ActivitySessionflow.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.ActivitySessionflow.Create(Genesys.Framework.Flow.IFlowClass)">
            <summary>
            Creates or pulls normalized ActivitySessionflow record
            </summary>
            <param name="workflow">Full workflow to populate</param>
        </member>
        <member name="M:Genesys.Framework.Entity.ActivitySessionflow.GetByAll(Genesys.Foundation.Session.ISessionContext,System.Guid)">
            <summary>
            Gets record by Unique Key values
            </summary>
            <param name="context">ISessionContext</param>
            <param name="FlowKey">Flow ID of the workflow/sessionflow/queryflow being executed</param>
        </member>
        <member name="T:Genesys.Framework.Entity.ActivityWorkflow">
            <summary>
            Activity data on a transactional workflow. Main activity record for any data committed to the system.
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.ActivityWorkflow.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.ActivityWorkflow.GetUnfinished(System.Guid,System.Guid)">
            <summary>
            Gets unfinished workflows, for multi-step flows
            </summary>
            <param name="entityKey">Entity owning the process</param>
            <param name="FlowKey">Workflow to pull</param>
        </member>
        <member name="M:Genesys.Framework.Entity.ActivityWorkflow.Save(Genesys.Framework.Flow.IFlowClass)">
            <summary>
            Saves data
            </summary>
            <param name="workflow">Workflow processing this transaction.</param>
        </member>
        <member name="M:Genesys.Framework.Entity.ActivityWorkflow.CanExecute">
            <summary>
            Determines if this workflow can be processed
            </summary>        
        </member>
        <member name="T:Genesys.Framework.Entity.ApplicationInfo">
            <summary>
            ApplicationInfo DAO
            </summary>
        </member>
        <member name="T:Genesys.Framework.Entity.ApplicationInfo.Applications">
            <summary>
            Holds IDs of global records
            </summary>
        </member>
        <member name="P:Genesys.Framework.Entity.ApplicationInfo.Applications.Sandbox">
            <summary>
            Sandbox record, for general purpose use and testing. Not for Production Use!
            </summary>
        </member>
        <member name="T:Genesys.Framework.Entity.ApplicationSetting">
            <summary>
            Application DAO
            </summary>
        </member>
        <member name="P:Genesys.Framework.Entity.ApplicationSetting.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.ApplicationSetting.GetByApplication(System.Guid)">
            <summary>
            Gets one setting for the application
            </summary>
            <param name="applicationKey">App ID to get settings</param>
        </member>
        <member name="M:Genesys.Framework.Entity.ApplicationSetting.GetByAll(System.Guid,System.Int32)">
            <summary>
            Gets one setting for the application
            </summary>
            <param name="applicationKey">App ID to get settings</param>
            <param name="settingTypeID">Type of setting</param>
        </member>
        <member name="T:Genesys.Framework.Entity.AppointmentInfo">
            <summary>
            Event location and time
            </summary>    
        </member>
        <member name="T:Genesys.Framework.Entity.BusinessInfo">
            <summary>
            BusinessInfo DAO
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.BusinessInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.BusinessInfo.Create(System.String,Genesys.Foundation.Activity.IActivity)">
            <summary>
            Creates a new record, with save
            </summary>
            <param name="name"></param>
            <param name="activity"></param>        
        </member>
        <member name="M:Genesys.Framework.Entity.BusinessInfo.Save(Genesys.Foundation.Activity.IActivity)">
            <summary>
            Save the entity to the database
            </summary>
            <param name="activity">Activity controlling this transaction process.</param>
        </member>
        <member name="M:Genesys.Framework.Entity.BusinessInfo.CanEntityView(System.Int32,System.Int32)">
            <summary>
            Checks database to see if a EntityID can view
            </summary>
            <param name="viewerEntityID">ViewerEntityID</param>
            <param name="businessEntityID">BusinessEntityID</param>
        </member>
        <member name="M:Genesys.Framework.Entity.BusinessInfo.IsBusinessalInfoComplete">
            <summary>
            Checks if business info is complete
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.BusinessInfo.DoesBusinessExists(System.Int32)">
            <summary>
            DoesBusinessExists
            </summary>
            <param name="entityID">Business to check</param>
        </member>
        <member name="M:Genesys.Framework.Entity.BusinessInfo.CanEntityUploadPhoto(System.Int32,System.Int32)">
            <summary>
            Can upload a photo for this Business
            </summary>
            <param name="entityID">Entity to add photo to</param>
            <param name="requestingEntityID">Entity making the request</param>
        </member>
        <member name="M:Genesys.Framework.Entity.BusinessInfo.CanEntityUploadPhoto(System.Int32)">
            <summary>
            Can upload a photo for this Business
            </summary>
            <param name="requestingEntityID">Entity making the request</param>
        </member>
        <member name="M:Genesys.Framework.Entity.BusinessInfo.ToString">
            <summary>
            Concatenates name field into common combinations 
            </summary>
            <returns>Name field formatted in the General format.</returns>
        </member>
        <member name="T:Genesys.Framework.Entity.EntityInfo">
            <summary>
            ApplicationInfo DAO
            </summary>
        </member>
        <member name="T:Genesys.Framework.Entity.EventCoordinator">
            <summary>
            Event coordinators and their info
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.EventCoordinator.GetByEntity(System.Int32)">
            <summary>
            Gets all events for a single coordinator
            </summary>
            <param name="entityID"></param>        
        </member>
        <member name="M:Genesys.Framework.Entity.EventCoordinator.GetByEntityGroup(System.Int32,System.Int32)">
            <summary>
            Gets all events for this entityID for a group
            </summary>
            <param name="entityID">EntityID</param>
            <param name="eventGroupID">EventGroupID</param>        
        </member>
        <member name="M:Genesys.Framework.Entity.EventCoordinator.GetByEntityDate(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Gets all entity events by date
            </summary>
            <param name="entityID">Owner</param>
            <param name="beginDate">Begin date</param>
            <param name="endDate">End date</param>        
        </member>
        <member name="M:Genesys.Framework.Entity.EventCoordinator.GetByEvent(System.Int32)">
            <summary>
            Gets all coordinators for event
            </summary>
            <param name="eventID">Event to get coordinators</param>        
        </member>
        <member name="T:Genesys.Framework.Entity.EventDetail">
            <summary>
            Event detail
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.EventDetail.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.EventDetail.GetByEventDetailType(System.Int32,System.Int32)">
            <summary>
            Gets by Unique key
            </summary>
            <param name="eventID">ID of event</param>
            <param name="detailTypeID">Type of detail to get</param>
        </member>
        <member name="M:Genesys.Framework.Entity.EventDetail.GetByEvent(System.Int32)">
            <summary>
            Gets all details for a type of event
            </summary>
            <param name="eventID">ID of event</param>
        </member>
        <member name="M:Genesys.Framework.Entity.EventDetail.Save(System.Int32,System.Collections.Generic.List{Genesys.Framework.Entity.EventDetail},Genesys.Foundation.Activity.IActivity)">
            <summary>
            Saves all items in a list and ensures they have an ID
            </summary>
            <param name="eventID">Event to save</param>
            <param name="details">Details to attach to even</param>
            <param name="activity">Activity tracking this process.</param>
        </member>
        <member name="T:Genesys.Framework.Entity.EventDetailType">
            <summary>
            Event detail type
            </summary>    
        </member>
        <member name="T:Genesys.Framework.Entity.EventDetailType.Types">
            <summary>
            Types of event details
            </summary>
        </member>
        <member name="F:Genesys.Framework.Entity.EventDetailType.Types.WebSite">
            <summary>
            Info about the WebSite
            </summary>
        </member>
        <member name="F:Genesys.Framework.Entity.EventDetailType.Types.HoursOfOperation">
            <summary>
            Info about the HoursOfOperation
            </summary>
        </member>
        <member name="F:Genesys.Framework.Entity.EventDetailType.Types.Admission">
            <summary>
            Info about Admission 
            </summary>
        </member>
        <member name="F:Genesys.Framework.Entity.EventDetailType.Types.HowToEntity">
            <summary>
            Info about HowToEntity 
            </summary>
        </member>
        <member name="F:Genesys.Framework.Entity.EventDetailType.Types.Directions">
            <summary>
            Info about the Directions
            </summary>
        </member>
        <member name="F:Genesys.Framework.Entity.EventDetailType.Types.MoreInfo">
            <summary>
            Info about MoreInfo 
            </summary>
        </member>
        <member name="F:Genesys.Framework.Entity.EventDetailType.Types.Parking">
            <summary>
            Info about the Parking
            </summary>
        </member>
        <member name="P:Genesys.Framework.Entity.EventDetailType.ExcludeEventTypeID">
            <summary>
            This detail does not apply to the exclude ID
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.EventDetailType.#ctor">
            <summary>
            Constructor
            </summary>        
        </member>
        <member name="M:Genesys.Framework.Entity.EventDetailType.GetByEventType(System.Int32)">
            <summary>
            Gets all detail types that are not excluded for this event type
            </summary>
        </member>
        <member name="T:Genesys.Framework.Entity.EventInfo">
            <summary>
            Events
            </summary>
        </member>
        <member name="T:Genesys.Framework.Entity.EventInfo.Groups">
            <summary>
            Groups define how an event is processed and defaults (i.e. invite prompts for email template first, then x.)
            </summary>
        </member>
        <member name="F:Genesys.Framework.Entity.EventInfo.Groups.GetTogether">
            <summary>
            Private event, like a house party
            </summary>
        </member>
        <member name="F:Genesys.Framework.Entity.EventInfo.Groups.PublicEvent">
            <summary>
            Public event, where anybody can attend
            </summary>
        </member>
        <member name="F:Genesys.Framework.Entity.EventInfo.Groups.PersonalExperience">
            <summary>
            A personal experience, that has happened in the past
            </summary>
        </member>
        <member name="F:Genesys.Framework.Entity.EventInfo.Groups.Meeting">
            <summary>
            An organized meeting, typically repeating
            </summary>
        </member>
        <member name="P:Genesys.Framework.Entity.EventInfo.PrivacyViewID">
            <summary>
            View privacy settings (Property object and tables)
            </summary>
        </member>
        <member name="P:Genesys.Framework.Entity.EventInfo.Code">
            <summary>
            Code for entire event. Can be an entry password or discount
            </summary>
        </member>
        <member name="P:Genesys.Framework.Entity.EventInfo.BeginDate">
            <summary>
            Begin date/time
            </summary>
        </member>
        <member name="P:Genesys.Framework.Entity.EventInfo.EndDate">
            <summary>
            End date/time
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.EventInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.EventInfo.GetByCreatorGroup(System.Int32,System.Guid)">
            <summary>
            Loads an existing object based on dates
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.EventInfo.GetMyEvents(System.Int32)">
            <summary>
            Loads an existing object based on dates.
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.EventInfo.GetByDate(System.DateTime)">
            <summary>
            Loads an existing object based on dates.
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.EventInfo.GetByDateRange(System.DateTime,System.DateTime)">
            <summary>
            Loads an existing object based on dates.
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.EventInfo.GetByBeginDate(System.DateTime,System.DateTime)">
            <summary>
            Loads an existing object based on dates.
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.EventInfo.GetByEndDate(System.DateTime,System.DateTime)">
            <summary>
            Loads an existing object based on dates.
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.EventInfo.GetMostRecent(System.Int32,System.Int32)">
            <summary>
            Gets most recent RSVP, or Created, or an example
            </summary>
            <param name="entityID">Owner RequestingEntityID</param>
            <param name="eventGroupID">Group of event</param>
        </member>
        <member name="M:Genesys.Framework.Entity.EventInfo.Save(System.Int32,Genesys.Foundation.Activity.IActivity)">
            <summary>
            Commits to database
            </summary>
            <param name="creatorID">RequestingEntityID of creator</param>
            <param name="activity">Activity responsible for tracking this process</param>        
        </member>
        <member name="M:Genesys.Framework.Entity.EventInfo.URLView(System.String,System.Int32)">
            <summary>
            URL for viewing
            </summary>
            <param name="appURL">Root Url</param>
            <param name="eventID">ID</param>
        </member>
        <member name="M:Genesys.Framework.Entity.EventInfo.ToString">
            <summary>
            Returns name
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.EventInfo.CanView(System.Guid,System.Guid)">
            <summary>
            Checks database to see if a RequestingEntityID can view this event
            </summary>
            <param name="requestingEntityKey">ContacID requesting to view</param>
            <param name="EventKey">Event to view</param>
        </member>
        <member name="M:Genesys.Framework.Entity.EventInfo.CanView(System.String,System.String,System.Guid)">
            <summary>
            Checks to see if an anonymous view can happen by username
            </summary>
            <param name="username">Requesting viewer</param>
            <param name="userNameEncrypted">Encrypted username value from outside the system</param>
            <param name="EventKey">Evnet to view</param>
        </member>
        <member name="M:Genesys.Framework.Entity.EventInfo.IsEventComplete">
            <summary>
            Checks data to see if minimum complete
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.EventInfo.IsCreator(System.Int32,System.Int32)">
            <summary>
            Checks database to see if this is a coordinator
            </summary>
            <param name="requestingEntityID">Requester</param>
            <param name="eventID">Event to check</param>
        </member>
        <member name="M:Genesys.Framework.Entity.EventInfo.IsCreator(System.Int32)">
            <summary>
            Checks database to see if this is a coordinator
            </summary>
            <param name="entityID">EntityID</param>
        </member>
        <member name="M:Genesys.Framework.Entity.EventInfo.CanEntityEdit(System.Int32,System.Int32)">
            <summary>
            Can edit
            </summary>
            <param name="entityID">EntityID</param>
            <param name="eventID">EventID</param>
        </member>
        <member name="M:Genesys.Framework.Entity.EventInfo.DoesEventExist(System.Int32)">
            <summary>
            Checks DB for this event
            </summary>
            <param name="eventID">ID of the event to check</param>
        </member>
        <member name="M:Genesys.Framework.Entity.EventInfo.CanEntityUploadPhoto(System.Int32,System.Int32)">
            <summary>
            Can upload a photo for this event
            </summary>
            <param name="entityID">EntityID</param>
            /// <param name="eventID">EventID</param>
        </member>
        <member name="M:Genesys.Framework.Entity.EventInfo.HasBeenInvited(System.Int32,System.Int32)">
            <summary>
            Has been invited to event
            </summary>
            <param name="entityID">EntityID</param>
            <param name="eventID">EventID</param>
        </member>
        <member name="T:Genesys.Framework.Entity.EventType">
            <summary>
            Type of event
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.EventType.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.EventType.GetByEventGroup(System.Int32)">
            <summary>
            Pulls all event types for a group
            </summary>
            <param name="eventGroupID">Group to pull</param>
        </member>
        <member name="T:Genesys.Framework.Entity.FlowInfo">
            <summary>
            Contains workflows and their steps
            </summary>
        </member>
        <member name="T:Genesys.Framework.Entity.FlowInfo.Steps">
            <summary>
            Workflow steps
            </summary>
        </member>
        <member name="F:Genesys.Framework.Entity.FlowInfo.Steps.Unprocessed">
            <summary>
            Workflow has not started
            </summary>
        </member>
        <member name="F:Genesys.Framework.Entity.FlowInfo.Steps.PendingNextStep">
            <summary>
            Workflow still has steps to finish
            </summary>
        </member>
        <member name="F:Genesys.Framework.Entity.FlowInfo.Steps.Completed">
            <summary>
            Workflow complete
            </summary>
        </member>
        <member name="F:Genesys.Framework.Entity.FlowInfo.Steps.WorkflowAlreadyCompleted">
            <summary>
            Workflow previously completed, cant re-run
            </summary>
        </member>
        <member name="F:Genesys.Framework.Entity.FlowInfo.Steps.FailedUnexpected">
            <summary>
            Failed unexpectedly
            </summary>
        </member>
        <member name="F:Genesys.Framework.Entity.FlowInfo.Steps.FailedPayment">
            <summary>
            Failed processing payment
            </summary>
        </member>
        <member name="F:Genesys.Framework.Entity.FlowInfo.Steps.FailedNotAuthorized">
            <summary>
            Failed due to not authorized to perform task
            </summary>
        </member>
        <member name="F:Genesys.Framework.Entity.FlowInfo.Steps.FailedValidation">
            <summary>
            Validation failed
            </summary>
        </member>
        <member name="T:Genesys.Framework.Entity.GenderInfo">
            <summary>
            EntityGender
            </summary>
        </member>
        <member name="T:Genesys.Framework.Entity.GenderInfo.Genders">
            <summary>
            ISO 5218 Standard for Gender values
            </summary>
        </member>
        <member name="P:Genesys.Framework.Entity.GenderInfo.Genders.NotSet">
            <summary>
            Default. Not set
            </summary>
        </member>
        <member name="P:Genesys.Framework.Entity.GenderInfo.Genders.NotKnown">
            <summary>
            Unknown gender
            </summary>
        </member>
        <member name="P:Genesys.Framework.Entity.GenderInfo.Genders.Male">
            <summary>
            Male gender
            </summary>
        </member>
        <member name="P:Genesys.Framework.Entity.GenderInfo.Genders.Female">
            <summary>
            Femal Gender
            </summary>
        </member>
        <member name="P:Genesys.Framework.Entity.GenderInfo.Genders.NotApplicable">
            <summary>
            Not applicable or do not want to specify
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.GenderInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.GenderInfo.ToString(System.String,System.IFormatProvider)">
            <summary>
            Concatenates name field into common combinations (G, cn)
            </summary>
            <param name="format">G (Name), cn (Code - Name)</param>
            <param name="formatProvider">ICustomFormatter compatible class</param>
            <returns>Name field formatted in common combinations</returns>
        </member>
        <member name="T:Genesys.Framework.Entity.GovernmentInfo">
            <summary>
            EntityGovernment
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.GovernmentInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.GovernmentInfo.Create(System.String,System.Int32,Genesys.Foundation.Activity.IActivity)">
            <summary>
            Creates a new record, with save
            </summary>
            <param name="name"></param>
            <param name="locationID"></param>
            <param name="activity"></param>        
        </member>
        <member name="M:Genesys.Framework.Entity.GovernmentInfo.Save(Genesys.Foundation.Activity.IActivity)">
            <summary>
            Save the entity to the database
            </summary>
            <param name="activity">Activity tracking this transactional process</param>
        </member>
        <member name="M:Genesys.Framework.Entity.GovernmentInfo.CanEntityView(System.Int32,System.Int32)">
            <summary>
            Checks database to see if a EntityID can view
            </summary>
            <param name="viewerEntityID">ViewerEntityID</param>
            <param name="governmentEntityID">GovernmentEntityID</param>
        </member>
        <member name="M:Genesys.Framework.Entity.GovernmentInfo.IsGovernmentalInfoComplete">
            <summary>
            Checks if Governmental info is complete
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.GovernmentInfo.DoesGovernmentExists(System.Int32)">
            <summary>
            DoesGovernmentExists
            </summary>
            <param name="entityID">Government to check</param>
        </member>
        <member name="M:Genesys.Framework.Entity.GovernmentInfo.CanEntityUploadPhoto(System.Int32,System.Int32)">
            <summary>
            Can upload a photo for this Government
            </summary>
            <param name="entityID">Entity to add photo to</param>
            <param name="requestingEntityID">Entity making the request</param>
        </member>
        <member name="M:Genesys.Framework.Entity.GovernmentInfo.CanEntityUploadPhoto(System.Int32)">
            <summary>
            Can upload a photo for this Government
            </summary>
            <param name="requestingEntityID">Entity making the request</param>
        </member>
        <member name="M:Genesys.Framework.Entity.GovernmentInfo.ToString">
            <summary>
            Concatenates name field into common combinations 
            </summary>
            <returns>Name field formatted in the General format.</returns>
        </member>
        <member name="T:Genesys.Framework.Entity.ModuleInfo">
            <summary>
            Module DAO
            </summary>
        </member>
        <member name="T:Genesys.Framework.Entity.ModuleInfo.Modules">
            <summary>
            Holds IDs of global records
            </summary>
        </member>
        <member name="P:Genesys.Framework.Entity.ModuleInfo.Modules.Framework">
            <summary>
            Sandbox record, for general purpose use and testing. Not for Production Use!
            </summary>
        </member>
        <member name="T:Genesys.Framework.Entity.ModuleSetting">
            <summary>
            ModuleSetting DAO
            </summary>
        </member>
        <member name="P:Genesys.Framework.Entity.ModuleSetting.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.ModuleSetting.GetByModule(System.Int32)">
            <summary>
            Gets one setting for the Module
            </summary>
            <param name="moduleID">ID to get</param>
        </member>
        <member name="M:Genesys.Framework.Entity.ModuleSetting.GetByAll(System.Int32,System.Int32)">
            <summary>
            Gets one setting for the Module
            </summary>
            <param name="moduleID">ID to get</param>
            <param name="settingTypeID">Setting type</param>
        </member>
        <member name="T:Genesys.Framework.Entity.PersonInfo">
            <summary>
            EntityPerson
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.PersonInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.PersonInfo.#ctor(System.String,System.String,System.String,System.DateTime)">
            <summary>
            Creates unsaved object with data
            </summary>
            <param name="firstName"></param>
            <param name="middleName"></param>
            <param name="lastName"></param>
            <param name="birthDate"></param>
        </member>
        <member name="M:Genesys.Framework.Entity.PersonInfo.Create(System.String,System.String,System.String,System.DateTime)">
            <summary>
            Creates a new record, with save
            </summary>
            <param name="firstName">FirstName</param>
            <param name="middleName">MiddleName</param>
            <param name="lastName">LastName</param>
            <param name="birthDate">BirthDate</param>
        </member>
        <member name="M:Genesys.Framework.Entity.PersonInfo.Save">
            <summary>
            Save the entity to the database. This method will auto-generate activity tracking.
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.PersonInfo.Save(Genesys.Foundation.Activity.IActivity)">
            <summary>
            Save the entity to the database.
            This method requires a valid Activity to track this database commit
            </summary>
            <param name="activity">Activity tracking this record</param>
        </member>
        <member name="M:Genesys.Framework.Entity.PersonInfo.CanEntityView(System.Int32,System.Int32)">
            <summary>
            Checks database to see if a EntityID can view
            </summary>
            <param name="viewerEntityID">ViewerEntityID</param>
            <param name="personEntityID">PersonEntityID</param>
        </member>
        <member name="M:Genesys.Framework.Entity.PersonInfo.IsPersonalInfoComplete">
            <summary>
            Checks if personal info is complete
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.PersonInfo.DoesPersonExists(System.Int32)">
            <summary>
            DoesPersonExists
            </summary>
            <param name="entityID">Person to check</param>
        </member>
        <member name="M:Genesys.Framework.Entity.PersonInfo.CanEntityUploadPhoto(System.Int32,System.Int32)">
            <summary>
            Can upload a photo for this person
            </summary>
            <param name="entityID">Entity to add photo to</param>
            <param name="requestingEntityID">Entity making the request</param>
        </member>
        <member name="M:Genesys.Framework.Entity.PersonInfo.CanEntityUploadPhoto(System.Int32)">
            <summary>
            Can upload a photo for this person
            </summary>
            <param name="requestingEntityID">Entity making the request</param>
        </member>
        <member name="M:Genesys.Framework.Entity.PersonInfo.URLView(System.String,System.Int32)">
            <summary>
            URL for viewing
            </summary>
            <param name="appURL">Root url</param>
            <param name="entityID">Entity to view</param>
        </member>
        <member name="M:Genesys.Framework.Entity.PersonInfo.ToString(System.String,System.IFormatProvider)">
            <summary>
            Concatenates name field into common combinations (lfm, lfMI, fMIl, fl, fml)
            </summary>
            <param name="format">lfm, lfMI, fMIl, fl, fml</param>
            <param name="formatProvider">ICustomFormatter compatible class</param>
            <returns>Name field formatted in common combinations (lfm, lfMI, fMIl, fl, fml)</returns>
        </member>
        <member name="T:Genesys.Framework.Entity.PropertyEntity">
            <summary>
            PropertyEntity 
            </summary>
        </member>
        <member name="P:Genesys.Framework.Entity.PropertyEntity.PropertyItem">
            <summary>
            Property to chose a value to
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.PropertyEntity.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.PropertyEntity.#ctor(System.Guid,System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="propertyKey">PropertyID</param>
            <param name="entityKey">EntityID</param>
        </member>
        <member name="M:Genesys.Framework.Entity.PropertyEntity.Create(System.Guid,Genesys.Framework.Flow.IFlowClass)">
            <summary>
            Instantiates and saves one record
            </summary>
            <param name="PropertyKey">PropertyID</param>
            <param name="workflow">Workflow</param>
        </member>
        <member name="M:Genesys.Framework.Entity.PropertyEntity.CreateOnePerGroup(System.Guid,Genesys.Framework.Flow.IFlowClass)">
            <summary>
            Instantiates and saves one record
            </summary>
            <param name="PropertyKey">PropertyID</param> 
            <param name="workflow">Workflow</param>
        </member>
        <member name="M:Genesys.Framework.Entity.PropertyEntity.GetByEntity(System.Guid)">
            <summary>
            Gets properties per entity
            </summary>
            <param name="EntityKey">EntityID</param>
        </member>
        <member name="M:Genesys.Framework.Entity.PropertyEntity.GetByPropertyEntity(System.Guid,System.Guid)">
            <summary>
            Gets by property and entity
            </summary>
            <param name="EntityKey">EntityID</param>
            <param name="PropertyKey">PropertyID</param>
        </member>
        <member name="M:Genesys.Framework.Entity.PropertyEntity.GetByPropertyEntityGroup(System.Guid,System.Guid)">
            <summary>
            Gets by entity and group
            </summary>
            <param name="entityKey">EntityID</param>
            <param name="propertyGroupKey">PropertyGroupID</param>
        </member>
        <member name="M:Genesys.Framework.Entity.PropertyEntity.Save(System.Guid,System.Guid,System.Collections.Generic.List{Genesys.Framework.Entity.PropertyEntity},Genesys.Framework.Flow.IFlowClass)">
            <summary>
            This resets and saves only 1 group of properties. 
            This will clear entire list if nothing is selected and fall-back to default
            </summary>
            <param name="entityKey">EntityID</param>
            <param name="propertyGroupKey">PropertyGroupID</param>
            <param name="selectedProperties">SelectedProperties</param>
            <param name="workflow">Workflow processing this record</param>
        </member>
        <member name="M:Genesys.Framework.Entity.PropertyEntity.Save(System.Guid,Genesys.Framework.Flow.IFlowClass)">
            <summary>
            This resets and saves only 1 group of properties
            This REQUIRES one property to be selected for the group (i.e. Male/Female)
            </summary>
            <param name="entityKey">EntityID</param>
            <param name="workflow">Workflow processing this record</param>
        </member>
        <member name="T:Genesys.Framework.Entity.PropertyGroup">
            <summary>
            PropertyGroup
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.PropertyGroup.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Genesys.Framework.Entity.PropertyInfo">
            <summary>
            PropertyInfo
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.PropertyInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.PropertyInfo.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="id">ID</param>
            <param name="propertyGroupID">PropertyGroupID</param>
            <param name="name">Name</param>
        </member>
        <member name="M:Genesys.Framework.Entity.PropertyInfo.GetByEntity(System.Guid)">
            <summary>
            Data access heavy way of getting a list of Property from an Entity
            </summary>
            <param name="EntityKey">EntityID</param>
        </member>
        <member name="M:Genesys.Framework.Entity.PropertyInfo.GetByGroup(System.Guid)">
            <summary>
            Pulls only properties with a specific groupID
            </summary>
            <param name="PropertyGroupKey">PropertyGroupID</param>
        </member>
        <member name="T:Genesys.Framework.Entity.PropertyEntitySingle">
            <summary>
            For one selection in a PropertyGroup's properties
            </summary>
        </member>
        <member name="P:Genesys.Framework.Entity.PropertyEntitySingle.EntityKey">
            <summary>
            EntityID regarding this property
            </summary>
        </member>
        <member name="P:Genesys.Framework.Entity.PropertyEntitySingle.Selections">
            <summary>
            Possible selections
            </summary>
        </member>
        <member name="P:Genesys.Framework.Entity.PropertyEntitySingle.Group">
            <summary>
            Group
            </summary>
        </member>
        <member name="P:Genesys.Framework.Entity.PropertyEntitySingle.PropertyKey">
            <summary>
            Property whose value is being selected
            </summary>
        </member>
        <member name="P:Genesys.Framework.Entity.PropertyEntitySingle.Value">
            <summary>
            Selected value
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.PropertyEntitySingle.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Genesys.Framework.Entity.PropertyEntitySingle.#ctor(System.Guid)">
            <summary>
            Sets group and selections
            </summary>
            <param name="PropertyGroupKey">PropertyGroupID</param>
        </member>
        <member name="M:Genesys.Framework.Entity.PropertyEntitySingle.#ctor(System.Guid,System.Guid)">
            <summary>
            Sets groups and selections for a entity
            </summary>
            <param name="entityKey">EntityID</param>
            <param name="propertyGroupKey">PropertyGroupID</param>
        </member>
        <member name="M:Genesys.Framework.Entity.PropertyEntitySingle.Save(System.Guid,Genesys.Framework.Flow.IFlowClass)">
            <summary>
            Saves the selected property for the entity
            </summary>
            <param name="entityKey">EntityID</param>
            <param name="workflow">Workflow</param>
        </member>
        <member name="T:Genesys.Framework.Entity.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Genesys.Framework.Entity.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Genesys.Framework.Entity.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Genesys.Framework.Entity.Properties.Resources.EmptyTransparent">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
    </members>
</doc>
